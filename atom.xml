<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞雪映月</title>
  <icon>https://www.gravatar.com/avatar/9d8f2f747c018c1d8a1d38867fe92563</icon>
  <subtitle>道阻且长，行则将至。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-14T02:11:37.767Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王海同</name>
    <email>1613037742@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>美团面试常见算法题</title>
    <link href="http://yoursite.com/2017/11/14/%E7%BE%8E%E5%9B%A2%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/14/美团面试常见算法题/</id>
    <published>2017-11-14T02:09:37.000Z</published>
    <updated>2017-11-14T02:11:37.767Z</updated>
    
    <content type="html"><![CDATA[<h3 id="求一个数的平方根"><a href="#求一个数的平方根" class="headerlink" title="求一个数的平方根"></a>求一个数的平方根</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">1</span>, right = x, ans;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt;= x / mid) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">            ans = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A的B次方"><a href="#A的B次方" class="headerlink" title="A的B次方"></a>A的B次方</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">n = -n;</span><br><span class="line">x = <span class="number">1</span> / x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (n % <span class="number">2</span> == <span class="number">0</span>) ? pow(x * x, n / <span class="number">2</span>) : x * pow(x * x, n / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断一棵树是另一颗树的子树"><a href="#判断一棵树是另一颗树的子树" class="headerlink" title="判断一棵树是另一颗树的子树"></a>判断一棵树是另一颗树的子树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (isSame(s, t))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span> isSubtree(s.left, t) || isSubtree(s.right, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSame</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s.val != t.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> isSame(s.left, t.left) &amp;&amp; isSame(s.right, t.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="前序非递归遍历"><a href="#前序非递归遍历" class="headerlink" title="前序非递归遍历"></a>前序非递归遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder2</span><span class="params">(BinTree t)</span> </span>&#123;    </span><br><span class="line">    Stack&lt;BinTree&gt; s = <span class="keyword">new</span> Stack&lt;BinTree&gt;();    </span><br><span class="line">    BinTree p = t;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> || !s.empty()) &#123;    </span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;    </span><br><span class="line">                System.out.print(p.data);    </span><br><span class="line">                s.push(p);    </span><br><span class="line">                p = p.lchild;    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">else</span> &#123;    </span><br><span class="line">            p = s.pop();    </span><br><span class="line">            p = p.rchild;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="分层打印树"><a href="#分层打印树" class="headerlink" title="分层打印树"></a>分层打印树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; wrapList = <span class="keyword">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> wrapList;</span><br><span class="line"></span><br><span class="line">queue.offer(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">int</span> levelNum = queue.size();</span><br><span class="line">List&lt;Integer&gt; subList = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelNum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (queue.peek().left != <span class="keyword">null</span>)</span><br><span class="line">queue.offer(queue.peek().left);</span><br><span class="line"><span class="keyword">if</span> (queue.peek().right != <span class="keyword">null</span>)</span><br><span class="line">queue.offer(queue.peek().right);</span><br><span class="line">subList.add(queue.poll().val);</span><br><span class="line">&#125;</span><br><span class="line">wrapList.add(<span class="number">0</span>, subList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> wrapList;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大股票"><a href="#最大股票" class="headerlink" title="最大股票"></a>最大股票</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int maxProfit(vector&lt;int&gt; &amp;prices) &#123;</span><br><span class="line">    int maxPro = 0;</span><br><span class="line">    int minPrice = INT_MAX;</span><br><span class="line">    for(int i = 0; i &lt; prices.size(); i++)&#123;</span><br><span class="line">        minPrice = min(minPrice, prices[i]);</span><br><span class="line">        maxPro = max(maxPro, prices[i] - minPrice);</span><br><span class="line">    &#125;</span><br><span class="line">    return maxPro;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序链表转化为二叉树"><a href="#有序链表转化为二叉树" class="headerlink" title="有序链表转化为二叉树"></a>有序链表转化为二叉树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BinaryTreeNode*<span class="title">CreateCore</span><span class="params">(<span class="keyword">int</span>*<span class="built_in">array</span>,<span class="keyword">int</span> begin,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(begin &gt; end)  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">          </span><br><span class="line">    <span class="keyword">int</span> mid = (begin+end)/<span class="number">2</span>;  </span><br><span class="line">    BinaryTreeNode* pRoot = CreateBinaryTreeNode(<span class="built_in">array</span>[mid]);  </span><br><span class="line">    pRoot-&gt;m_pLeft = CreateCore(<span class="built_in">array</span>, begin, mid<span class="number">-1</span>);  </span><br><span class="line">    pRoot-&gt;m_pRight = CreateCore(<span class="built_in">array</span>, mid+<span class="number">1</span>, end);  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> pRoot;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BinaryTreeNode*</span><br><span class="line"></span><br><span class="line">CreateSearchTree(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> length)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">array</span> == <span class="literal">NULL</span> || length &lt; <span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">     <span class="keyword">return</span> CreateCore(<span class="built_in">array</span>,<span class="number">0</span>, length<span class="number">-1</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入间隔"><a href="#插入间隔" class="headerlink" title="插入间隔"></a>插入间隔</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">insert</span><span class="params">(List&lt;Interval&gt; intervals, Interval newInterval)</span> </span>&#123;</span><br><span class="line">    List&lt;Interval&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// add all the intervals ending before newInterval starts</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; intervals.size() &amp;&amp; intervals.get(i).end &lt; newInterval.start)</span><br><span class="line">        result.add(intervals.get(i++));</span><br><span class="line">    <span class="comment">// merge all overlapping intervals to one considering newInterval</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; intervals.size() &amp;&amp; intervals.get(i).start &lt;= newInterval.end) &#123;</span><br><span class="line">        newInterval = <span class="keyword">new</span> Interval( <span class="comment">// we could mutate newInterval here also</span></span><br><span class="line">                Math.min(newInterval.start, intervals.get(i).start),</span><br><span class="line">                Math.max(newInterval.end, intervals.get(i).end));</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    result.add(newInterval); <span class="comment">// add the union of intervals we got</span></span><br><span class="line">    <span class="comment">// add all the rest</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; intervals.size()) result.add(intervals.get(i++)); </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前序和中序序列构建二叉树"><a href="#前序和中序序列构建二叉树" class="headerlink" title="前序和中序序列构建二叉树"></a>前序和中序序列构建二叉树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">0</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>, preorder, inorder);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span> preStart, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd, <span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preStart &gt; preorder.length - <span class="number">1</span> || inStart &gt; inEnd) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(preorder[preStart]);</span><br><span class="line">    <span class="keyword">int</span> inIndex = <span class="number">0</span>; <span class="comment">// Index of current root in inorder</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = inStart; i &lt;= inEnd; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder[i] == root.val) &#123;</span><br><span class="line">            inIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root.left = helper(preStart + <span class="number">1</span>, inStart, inIndex - <span class="number">1</span>, preorder, inorder);</span><br><span class="line">    root.right = helper(preStart + inIndex - inStart + <span class="number">1</span>, inIndex + <span class="number">1</span>, inEnd, preorder, inorder);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序和中序序列构建二叉树"><a href="#后序和中序序列构建二叉树" class="headerlink" title="后序和中序序列构建二叉树"></a>后序和中序序列构建二叉树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTreePostIn</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (inorder == <span class="keyword">null</span> || postorder == <span class="keyword">null</span> || inorder.length != postorder.length)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">HashMap&lt;Integer, Integer&gt; hm = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;inorder.length;++i)</span><br><span class="line">hm.put(inorder[i], i);</span><br><span class="line"><span class="keyword">return</span> buildTreePostIn(inorder, <span class="number">0</span>, inorder.length-<span class="number">1</span>, postorder, <span class="number">0</span>, </span><br><span class="line">                          postorder.length-<span class="number">1</span>,hm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">buildTreePostIn</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span> is, <span class="keyword">int</span> ie, <span class="keyword">int</span>[] postorder, <span class="keyword">int</span> ps, <span class="keyword">int</span> pe, </span></span></span><br><span class="line"><span class="function"><span class="params">                                 HashMap&lt;Integer,Integer&gt; hm)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ps&gt;pe || is&gt;ie) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">TreeNode root = <span class="keyword">new</span> TreeNode(postorder[pe]);</span><br><span class="line"><span class="keyword">int</span> ri = hm.get(postorder[pe]);</span><br><span class="line">TreeNode leftchild = buildTreePostIn(inorder, is, ri-<span class="number">1</span>, postorder, ps, ps+ri-is-<span class="number">1</span>, hm);</span><br><span class="line">TreeNode rightchild = buildTreePostIn(inorder,ri+<span class="number">1</span>, ie, postorder, ps+ri-is, pe-<span class="number">1</span>, hm);</span><br><span class="line">root.left = leftchild;</span><br><span class="line">root.right = rightchild;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找出一个无序数组的中位数"><a href="#找出一个无序数组的中位数" class="headerlink" title="找出一个无序数组的中位数"></a>找出一个无序数组的中位数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PartSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = start;</span><br><span class="line">    <span class="keyword">int</span> right = end;</span><br><span class="line">    <span class="keyword">int</span> key = arr[end];   <span class="comment">//选取关键字</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= key)  <span class="comment">//左边找比key大的值</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= key)  <span class="comment">//右边找比key小的值</span></span><br><span class="line">        &#123;</span><br><span class="line">            --right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(arr[left], arr[right]);  <span class="comment">//找到之后交换左右的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr[right], arr[end]);</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求一个无序数组的中位数"><a href="#求一个无序数组的中位数" class="headerlink" title="求一个无序数组的中位数"></a>求一个无序数组的中位数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMidNumNoSort1</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(arr);</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (size - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> div = PartSort(arr,start,end);</span><br><span class="line">    <span class="keyword">while</span> (div != mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; div)   <span class="comment">//左半区间找</span></span><br><span class="line">            div = PartSort(arr, start, div - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//左半区间找</span></span><br><span class="line">            div = PartSort(arr, div + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[mid];   <span class="comment">//找到了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;求一个数的平方根&quot;&gt;&lt;a href=&quot;#求一个数的平方根&quot; class=&quot;headerlink&quot; title=&quot;求一个数的平方根&quot;&gt;&lt;/a&gt;求一个数的平方根&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="面试总结" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/13/hello-world/"/>
    <id>http://yoursite.com/2017/11/13/hello-world/</id>
    <published>2017-11-13T11:30:27.024Z</published>
    <updated>2017-11-13T11:30:27.024Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
